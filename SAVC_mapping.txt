Originally, the distance vectors were stored in a "2D" array, d_vectors[][] we'll call it, with size #_points^2. The distance vector between point X and Y was stored at d_vectors[X][Y]. For a number of points, say n=4, it would yield something like the following. Note: * indicates duplicate data in the way that d_vectors[1][2] would be the same as d_vectors[2][1], in the previously implemented case they were left at their initialized value of 0.0; - indicates the distance from a point to itself; a number is assigned to any remaining cell to give reference to its vector(cell 4 holds the distance between points 1 and 3):

d_vectors[][]=
   0  1  2  3
0 [-][0][1][2]
1 [*][-][3][4]
2 [*][*][-][5]
3 [*][*][*][-]

With it implemented like this, we get a trade off. This implementation provides 1) easy to read code and 2) easy accessing of vectors between points X and Y. The cost of this however is that as the number of vectors grows, the limit of useful information (non-repeated, non-zero) grows towards approximately .5 (50%) [eg. If n=10,000 and type=double, d_vectors size would be 100,000,000(400,000,000 B) with only 50,005,000 cells containing useful information]. Even though we have billions of bytes of memory in a given machine, an efficiency of 50% (or less) can be improved upon. Thusly, there is a way to map the vectors in the 2D array to a 1D array.

d_vectors[]=
   0  1  2  3  4  5
0 [0][1][2][3][4][5]


With this, we get 100% space efficiency. This mapping implementation works as follows:
Given the indicies of the points you want to find the vector between (r, c) and the number of points (n), you can recursively add the number of viable cells (size-r-1) in the row above (in the 2D array) plus `c-1`. 

int calculate_cell(int r, int c){
	if (c<=r){return calculate_cell(c,r);}
	else{ 
		if(r!=0){
			return (num_points-r-1)+calculate_cell(r-1,c);
		}
		return c-1;
	}
}

This above method takes in the points to find the distance between (the 2D coordinates) and returns the 1D cell which holds the correct vector. If the method gets passed cells that would be duplicate (eg. d_vectors[3][1]), it calls itself switching the parameters. The penalty to using this relational method is the cost of CPU/Wall time calculating the relationship between 2D and 1D arrays, however I feel that is offset by the 100% increase in memory efficiency from 2D to 1D mapping. In addition to this change, the d_vectors array is reduced in size from n^2 to (n(n+1))/2.
Further investigation would be required to abstract these things into finding and tracking points in 3 dimensions, and I feel the results of mapping to a 1D array would be even more beneficial.
